{
  "postcss.config.mjs": {
    "code": "/** @type {import('postcss-load-config').Config} */\nconst config = {\n    plugins: {\n        tailwindcss: {},\n    },\n};\n\nexport default config;\n",
    "active": true
  },
  "next.config.mjs": {
    "code": "/** @type {import('next').NextConfig} */\nconst nextConfig = {\n    output: 'standalone',\n    devIndicators: false,\n};\nexport default nextConfig;\n",
    "active": true
  },
  "tailwind.config.ts": {
    "code": "import type { Config } from 'tailwindcss';\n\nconst config: Config = {\n    darkMode: ['class'],\n    content: [\n        './pages/**/*.{js,ts,jsx,tsx,mdx}',\n        './components/**/*.{js,ts,jsx,tsx,mdx}',\n        './app/**/*.{js,ts,jsx,tsx,mdx}',\n    ],\n    theme: {\n        extend: {\n            backgroundImage: {\n                'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',\n                'gradient-conic':\n                    'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',\n            },\n            borderRadius: {\n                lg: 'var(--radius)',\n                md: 'calc(var(--radius) - 2px)',\n                sm: 'calc(var(--radius) - 4px)',\n            },\n            colors: {\n                background: 'hsl(var(--background))',\n                foreground: 'hsl(var(--foreground))',\n                card: {\n                    DEFAULT: 'hsl(var(--card))',\n                    foreground: 'hsl(var(--card-foreground))',\n                },\n                popover: {\n                    DEFAULT: 'hsl(var(--popover))',\n                    foreground: 'hsl(var(--popover-foreground))',\n                },\n                primary: {\n                    DEFAULT: 'hsl(var(--primary))',\n                    foreground: 'hsl(var(--primary-foreground))',\n                },\n                secondary: {\n                    DEFAULT: 'hsl(var(--secondary))',\n                    foreground: 'hsl(var(--secondary-foreground))',\n                },\n                muted: {\n                    DEFAULT: 'hsl(var(--muted))',\n                    foreground: 'hsl(var(--muted-foreground))',\n                },\n                accent: {\n                    DEFAULT: 'hsl(var(--accent))',\n                    foreground: 'hsl(var(--accent-foreground))',\n                },\n                destructive: {\n                    DEFAULT: 'hsl(var(--destructive))',\n                    foreground: 'hsl(var(--destructive-foreground))',\n                },\n                border: 'hsl(var(--border))',\n                input: 'hsl(var(--input))',\n                ring: 'hsl(var(--ring))',\n                chart: {\n                    '1': 'hsl(var(--chart-1))',\n                    '2': 'hsl(var(--chart-2))',\n                    '3': 'hsl(var(--chart-3))',\n                    '4': 'hsl(var(--chart-4))',\n                    '5': 'hsl(var(--chart-5))',\n                },\n            },\n        },\n    },\n    plugins: [require('tailwindcss-animate')],\n};\nexport default config;\n",
    "active": true
  },
  "package.json": {
    "code": "{\n    \"name\": \"@onlook/web-template\",\n    \"version\": \"0.1.0\",\n    \"private\": true,\n    \"scripts\": {\n        \"dev\": \"PORT=8084 next dev\",\n        \"build\": \"next build\",\n        \"start\": \"next start\",\n        \"lint\": \"next lint\",\n        \"format\": \"prettier --write .\"\n    },\n    \"dependencies\": {\n        \"@radix-ui/react-slot\": \"^1.1.0\",\n        \"@react-three/drei\": \"^9.88.13\",\n        \"@react-three/fiber\": \"^8.15.11\",\n        \"class-variance-authority\": \"^0.7.0\",\n        \"clsx\": \"^2.1.1\",\n        \"lucide-react\": \"^0.438.0\",\n        \"next\": \"14.2.26\",\n        \"react\": \"^18\",\n        \"react-dom\": \"^18\",\n        \"tailwind-merge\": \"^2.5.2\",\n        \"tailwindcss-animate\": \"^1.0.7\",\n        \"three\": \"^0.158.0\"\n    },\n    \"devDependencies\": {\n        \"@types/node\": \"^20\",\n        \"@types/react\": \"^18\",\n        \"@types/react-dom\": \"^18\",\n        \"@types/three\": \"^0.158.0\",\n        \"eslint\": \"^8\",\n        \"eslint-config-next\": \"^15.1.6\",\n        \"postcss\": \"^8\",\n        \"prettier\": \"^3.3.3\",\n        \"tailwindcss\": \"^3.4.1\",\n        \"typescript\": \"^5\"\n    }\n}\n"
  },
  ".prettierrc": {
    "code": "{\n    \"singleQuote\": true,\n    \"printWidth\": 100,\n    \"tabWidth\": 4,\n    \"useTabs\": false,\n    \"semi\": true,\n    \"jsxSingleQuote\": false,\n    \"bracketSpacing\": true,\n    \"arrowParens\": \"always\",\n    \"endOfLine\": \"lf\"\n}\n",
    "active": true
  },
  "components.json": {
    "code": "{\n    \"$schema\": \"https://ui.shadcn.com/schema.json\",\n    \"style\": \"default\",\n    \"rsc\": true,\n    \"tsx\": true,\n    \"tailwind\": {\n        \"config\": \"tailwind.config.ts\",\n        \"css\": \"app/globals.css\",\n        \"baseColor\": \"neutral\",\n        \"cssVariables\": true,\n        \"prefix\": \"\"\n    },\n    \"aliases\": {\n        \"components\": \"@/components\",\n        \"utils\": \"@/lib/utils\",\n        \"ui\": \"@/components/ui\",\n        \"lib\": \"@/lib\",\n        \"hooks\": \"@/hooks\"\n    }\n}\n",
    "active": true
  },
  "tsconfig.json": {
    "code": "{\n    \"compilerOptions\": {\n        \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n        \"allowJs\": true,\n        \"skipLibCheck\": true,\n        \"strict\": true,\n        \"noEmit\": true,\n        \"esModuleInterop\": true,\n        \"module\": \"esnext\",\n        \"moduleResolution\": \"bundler\",\n        \"resolveJsonModule\": true,\n        \"isolatedModules\": true,\n        \"jsx\": \"preserve\",\n        \"incremental\": true,\n        \"plugins\": [\n            {\n                \"name\": \"next\"\n            }\n        ],\n        \"paths\": {\n            \"@/*\": [\"./*\"]\n        }\n    },\n    \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n    \"exclude\": [\"node_modules\"]\n}\n",
    "active": true
  },
  ".eslintrc.json": {
    "code": "{\n    \"extends\": \"next/core-web-vitals\"\n}\n",
    "active": true
  },
  "app/layout.tsx": {
    "code": "import type { Metadata } from 'next';\nimport { Inter } from 'next/font/google';\nimport Script from 'next/script';\nimport './globals.css';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata: Metadata = {\n    title: 'VR Experience - Hello World',\n    description: 'A simple 360 VR experience built with Next.js and Three.js',\n};\n\n// Set to false for deployed template\nconst useLocalPreload = true;\nconst preloadSrc = useLocalPreload\n    ? `http://localhost:8083/?${Math.random()}`\n    : 'https://cdn.jsdelivr.net/gh/onlook-dev/onlook@main/apps/web/preload/dist/index.js';\n\n// Error Monitor Configuration\nconst useLocalErrorMonitor = false; // Set to true for local development\nconst errorMonitorSrc = useLocalErrorMonitor\n    ? `http://localhost:3001/error-monitor.js?${Math.random()}` // Your local server\n    : 'https://om-tericsoft1.github.io/node_error_monitor/error_monitor.js'; // Replace with your CDN URL\n\nconst isProd = process.env.NODE_ENV === 'production';\n\nexport default function RootLayout({ children }: Readonly<{ children: React.ReactNode }>) {\n    return (\n        <html lang=\"en\" data-oid=\"si2j4vl\">\n            <head>\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n                {/* Don't use preload in production */}\n                {!isProd && (\n                    <Script\n                        type=\"module\"\n                        src={preloadSrc}\n                        crossOrigin=\"anonymous\"\n                        strategy=\"beforeInteractive\"\n                    />\n                )}\n                \n                {/* Error Monitor - Load early to catch all errors */}\n                <Script\n                    src={errorMonitorSrc}\n                    strategy=\"beforeInteractive\"\n                    crossOrigin=\"anonymous\"\n                />\n            </head>\n            <body className={inter.className} data-oid=\"mwz9mme\">\n                {children}\n            </body>\n        </html>\n    );\n}"
  },
  "app/page.tsx": {
    "code": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { VRViewer } from '../components/VRViewer';\nimport { SceneSelector } from '../components/SceneSelector';\nimport { VRControls } from '../components/VRControls';\n\nconst scenes = [\n    {\n        id: 1,\n        name: 'Mountain Peak',\n        image: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=2048&h=1024&fit=crop',\n        thumbnail: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=300&h=150&fit=crop'\n    },\n    {\n        id: 2,\n        name: 'Ocean View',\n        image: 'https://images.unsplash.com/photo-1439066615861-d1af74d74000?w=2048&h=1024&fit=crop',\n        thumbnail: 'https://images.unsplash.com/photo-1439066615861-d1af74d74000?w=300&h=150&fit=crop'\n    },\n    {\n        id: 3,\n        name: 'Forest Path',\n        image: 'https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=2048&h=1024&fit=crop',\n        thumbnail: 'https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=300&h=150&fit=crop'\n    },\n    {\n        id: 4,\n        name: 'City Skyline',\n        image: 'https://images.unsplash.com/photo-1449824913935-59a10b8d2000?w=2048&h=1024&fit=crop',\n        thumbnail: 'https://images.unsplash.com/photo-1449824913935-59a10b8d2000?w=300&h=150&fit=crop'\n    }\n];\n\nexport default function Page() {\n    const [currentScene, setCurrentScene] = useState(scenes[0]);\n    const [isVRMode, setIsVRMode] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            setIsLoading(false);\n        }, 1000);\n\n        return () => clearTimeout(timer);\n    }, []);\n\n    const handleSceneChange = (scene: typeof scenes[0]) => {\n        setIsLoading(true);\n        setCurrentScene(scene);\n        setTimeout(() => setIsLoading(false), 500);\n    };\n\n    if (error) {\n        return (\n            <div className=\"min-h-screen bg-gray-900 flex items-center justify-center\">\n                <div className=\"text-center text-white\">\n                    <h2 className=\"text-2xl font-bold mb-4\">VR Not Supported</h2>\n                    <p className=\"text-gray-300\">{error}</p>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"min-h-screen bg-gray-900 relative overflow-hidden\">\n            {/* Header */}\n            <header className=\"absolute top-0 left-0 right-0 z-50 bg-black/50 backdrop-blur-sm\">\n                <div className=\"container mx-auto px-4 py-4\">\n                    <div className=\"flex items-center justify-between\">\n                        <h1 className=\"text-2xl font-bold text-white\">VR 360\u00b0 Explorer</h1>\n                        <VRControls \n                            isVRMode={isVRMode}\n                            onToggleVR={() => setIsVRMode(!isVRMode)}\n                        />\n                    </div>\n                </div>\n            </header>\n\n            {/* Main VR Viewer */}\n            <div className=\"relative w-full h-screen\">\n                {isLoading && (\n                    <div className=\"absolute inset-0 bg-black/80 flex items-center justify-center z-40\">\n                        <div className=\"text-center text-white\">\n                            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4\"></div>\n                            <p className=\"text-lg\">Loading 360\u00b0 Scene...</p>\n                        </div>\n                    </div>\n                )}\n                \n                <VRViewer \n                    scene={currentScene}\n                    isVRMode={isVRMode}\n                    onError={setError}\n                />\n            </div>\n\n            {/* Scene Selector */}\n            <div className=\"absolute bottom-0 left-0 right-0 z-50 bg-black/50 backdrop-blur-sm\">\n                <SceneSelector \n                    scenes={scenes}\n                    currentScene={currentScene}\n                    onSceneChange={handleSceneChange}\n                />\n            </div>\n        </div>\n    );\n}\n"
  },
  "app/globals.css": {
    "code": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n    --foreground-rgb: 0, 0, 0;\n    --background-start-rgb: 214, 219, 220;\n    --background-end-rgb: 255, 255, 255;\n}\n\n@media (prefers-color-scheme: dark) {\n    :root {\n        --foreground-rgb: 255, 255, 255;\n        --background-start-rgb: 0, 0, 0;\n        --background-end-rgb: 0, 0, 0;\n    }\n}\n\n@layer utilities {\n    .text-balance {\n        text-wrap: balance;\n    }\n}\n\n@layer base {\n    :root {\n        --background: 0 0% 100%;\n        --foreground: 0 0% 3.9%;\n        --card: 0 0% 100%;\n        --card-foreground: 0 0% 3.9%;\n        --popover: 0 0% 100%;\n        --popover-foreground: 0 0% 3.9%;\n        --primary: 0 0% 9%;\n        --primary-foreground: 0 0% 98%;\n        --secondary: 0 0% 96.1%;\n        --secondary-foreground: 0 0% 9%;\n        --muted: 0 0% 96.1%;\n        --muted-foreground: 0 0% 45.1%;\n        --accent: 0 0% 96.1%;\n        --accent-foreground: 0 0% 9%;\n        --destructive: 0 84.2% 60.2%;\n        --destructive-foreground: 0 0% 98%;\n        --border: 0 0% 89.8%;\n        --input: 0 0% 89.8%;\n        --ring: 0 0% 3.9%;\n        --chart-1: 12 76% 61%;\n        --chart-2: 173 58% 39%;\n        --chart-3: 197 37% 24%;\n        --chart-4: 43 74% 66%;\n        --chart-5: 27 87% 67%;\n        --radius: 0.5rem;\n    }\n    .dark {\n        --background: 0 0% 3.9%;\n        --foreground: 0 0% 98%;\n        --card: 0 0% 3.9%;\n        --card-foreground: 0 0% 98%;\n        --popover: 0 0% 3.9%;\n        --popover-foreground: 0 0% 98%;\n        --primary: 0 0% 98%;\n        --primary-foreground: 0 0% 9%;\n        --secondary: 0 0% 14.9%;\n        --secondary-foreground: 0 0% 98%;\n        --muted: 0 0% 14.9%;\n        --muted-foreground: 0 0% 63.9%;\n        --accent: 0 0% 14.9%;\n        --accent-foreground: 0 0% 98%;\n        --destructive: 0 62.8% 30.6%;\n        --destructive-foreground: 0 0% 98%;\n        --border: 0 0% 14.9%;\n        --input: 0 0% 14.9%;\n        --ring: 0 0% 83.1%;\n        --chart-1: 220 70% 50%;\n        --chart-2: 160 60% 45%;\n        --chart-3: 30 80% 55%;\n        --chart-4: 280 65% 60%;\n        --chart-5: 340 75% 55%;\n    }\n}\n\n@layer base {\n    * {\n        @apply border-border;\n    }\n    body {\n        @apply bg-background text-foreground;\n    }\n}\n",
    "active": true
  },
  "lib/utils.ts": {
    "code": "import { clsx, type ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs));\n}\n",
    "active": true
  },
  "components/VRExperience.tsx": {
    "code": "'use client';\n\nimport { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Text, Environment } from '@react-three/drei';\nimport { Suspense, useRef, useState, useEffect } from 'react';\nimport * as THREE from 'three';\n\nfunction PanoramicSphere() {\n    const meshRef = useRef<THREE.Mesh>(null);\n    \n    useEffect(() => {\n        // Load a 360 panoramic image\n        const loader = new THREE.TextureLoader();\n        const texture = loader.load(\n            'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=2048&h=1024&fit=crop',\n            undefined,\n            undefined,\n            (error) => {\n                console.error('Error loading panoramic texture:', error);\n            }\n        );\n        \n        if (meshRef.current) {\n            meshRef.current.material = new THREE.MeshBasicMaterial({\n                map: texture,\n                side: THREE.BackSide, // Render inside of sphere\n            });\n        }\n    }, []);\n\n    return (\n        <mesh ref={meshRef} scale={[-50, 50, 50]}>\n            <sphereGeometry args={[1, 32, 16]} />\n            <meshBasicMaterial color=\"#87CEEB\" side={THREE.BackSide} />\n        </mesh>\n    );\n}\n\nfunction FloatingText() {\n    const textRef = useRef<THREE.Group>(null);\n    \n    useEffect(() => {\n        const animate = () => {\n            if (textRef.current) {\n                textRef.current.rotation.y += 0.01;\n                textRef.current.position.y = Math.sin(Date.now() * 0.001) * 0.5;\n            }\n            requestAnimationFrame(animate);\n        };\n        animate();\n    }, []);\n\n    return (\n        <group ref={textRef} position={[0, 0, -5]}>\n            <Text\n                fontSize={2}\n                color=\"#ffffff\"\n                anchorX=\"center\"\n                anchorY=\"middle\"\n                font=\"https://fonts.gstatic.com/s/raleway/v14/1Ptrg8zYS_SKggPNwK4vaqI.woff\"\n            >\n                Hello VR World!\n            </Text>\n            <Text\n                fontSize={0.8}\n                color=\"#cccccc\"\n                anchorX=\"center\"\n                anchorY=\"middle\"\n                position={[0, -1.5, 0]}\n            >\n                Look around with your mouse or VR device\n            </Text>\n        </group>\n    );\n}\n\nfunction VRControls() {\n    const [isVRSupported, setIsVRSupported] = useState(false);\n    \n    useEffect(() => {\n        if (typeof window !== 'undefined' && 'DeviceOrientationEvent' in window) {\n            setIsVRSupported(true);\n        }\n    }, []);\n\n    return (\n        <OrbitControls\n            enableZoom={false}\n            enablePan={false}\n            enableDamping={true}\n            dampingFactor={0.05}\n            rotateSpeed={0.8}\n            autoRotate={false}\n            target={[0, 0, 0]}\n        />\n    );\n}\n\nexport default function VRExperience() {\n    const [webGLSupported, setWebGLSupported] = useState(true);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        // Check WebGL support\n        try {\n            const canvas = document.createElement('canvas');\n            const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n            if (!gl) {\n                setWebGLSupported(false);\n            }\n        } catch (error) {\n            setWebGLSupported(false);\n        }\n        \n        setTimeout(() => setIsLoading(false), 1000);\n    }, []);\n\n    if (!webGLSupported) {\n        return (\n            <div className=\"w-screen h-screen flex items-center justify-center bg-gradient-to-br from-blue-900 to-purple-900 text-white\">\n                <div className=\"text-center p-8\">\n                    <h1 className=\"text-3xl font-bold mb-4\">VR Not Supported</h1>\n                    <p className=\"text-lg\">Your device doesn't support WebGL required for VR experience.</p>\n                    <p className=\"mt-4 text-sm opacity-75\">Try using a modern browser or device.</p>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"w-screen h-screen relative\">\n            {isLoading && (\n                <div className=\"absolute inset-0 z-10 flex items-center justify-center bg-black text-white\">\n                    <div className=\"text-center\">\n                        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4\"></div>\n                        <p className=\"text-lg\">Loading VR Experience...</p>\n                    </div>\n                </div>\n            )}\n            \n            <Canvas\n                camera={{ position: [0, 0, 0], fov: 75 }}\n                style={{ background: '#000' }}\n                onCreated={({ gl }) => {\n                    gl.setClearColor('#000000');\n                }}\n            >\n                <Suspense fallback={null}>\n                    <PanoramicSphere />\n                    <FloatingText />\n                    <VRControls />\n                    <Environment preset=\"night\" />\n                </Suspense>\n            </Canvas>\n            \n            <div className=\"absolute bottom-4 left-4 text-white bg-black bg-opacity-50 p-3 rounded-lg\">\n                <p className=\"text-sm\">\n                    \ud83d\uddb1\ufe0f Drag to look around<br />\n                    \ud83d\udcf1 Use device orientation on mobile\n                </p>\n            </div>\n        </div>\n    );\n}",
    "active": true
  },
  "components/VRViewer.tsx": {
    "code": "'use client';\n\nimport { useEffect, useRef, useState } from 'react';\n\ninterface VRViewerProps {\n    scene: {\n        id: number;\n        name: string;\n        image: string;\n    };\n    isVRMode: boolean;\n    onError: (error: string) => void;\n}\n\nexport function VRViewer({ scene, isVRMode, onError }: VRViewerProps) {\n    const sceneRef = useRef<HTMLDivElement>(null);\n    const [aframeLoaded, setAframeLoaded] = useState(false);\n\n    useEffect(() => {\n        const loadAFrame = async () => {\n            try {\n                if (typeof window !== 'undefined' && !window.AFRAME) {\n                    const script = document.createElement('script');\n                    script.src = 'https://aframe.io/releases/1.4.0/aframe.min.js';\n                    script.onload = () => {\n                        setAframeLoaded(true);\n                    };\n                    script.onerror = () => {\n                        onError('Failed to load VR library');\n                    };\n                    document.head.appendChild(script);\n                } else if (window.AFRAME) {\n                    setAframeLoaded(true);\n                }\n            } catch (error) {\n                onError('VR not supported in this environment');\n            }\n        };\n\n        loadAFrame();\n    }, [onError]);\n\n    useEffect(() => {\n        if (!aframeLoaded || !sceneRef.current) return;\n\n        const aScene = sceneRef.current.querySelector('a-scene');\n        if (aScene) {\n            const sky = aScene.querySelector('a-sky');\n            if (sky) {\n                sky.setAttribute('src', scene.image);\n            }\n        }\n    }, [scene, aframeLoaded]);\n\n    if (!aframeLoaded) {\n        return (\n            <div className=\"w-full h-full bg-gray-800 flex items-center justify-center\">\n                <div className=\"text-white text-center\">\n                    <div className=\"animate-pulse\">Loading VR Engine...</div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div ref={sceneRef} className=\"w-full h-full\">\n            <a-scene\n                background=\"color: #000\"\n                cursor=\"rayOrigin: mouse\"\n                raycaster=\"objects: .clickable\"\n                vr-mode-ui={isVRMode ? 'enabled: true' : 'enabled: false'}\n            >\n                <a-assets>\n                    <img id=\"skyTexture\" src={scene.image} crossOrigin=\"anonymous\" />\n                </a-assets>\n                \n                <a-sky src=\"#skyTexture\" rotation=\"0 -90 0\"></a-sky>\n                \n                <a-camera\n                    look-controls=\"enabled: true\"\n                    wasd-controls=\"enabled: false\"\n                    cursor=\"fuse: true; fuseTimeout: 1500\"\n                    position=\"0 0 0\"\n                >\n                    <a-cursor\n                        animation__click=\"property: scale; startEvents: click; from: 0.1 0.1 0.1; to: 1 1 1; dur: 150\"\n                        animation__fusing=\"property: scale; startEvents: fusing; from: 1 1 1; to: 0.1 0.1 0.1; dur: 1500\"\n                        geometry=\"primitive: ring; radiusInner: 0.02; radiusOuter: 0.03\"\n                        material=\"color: white; shader: flat\"\n                        position=\"0 0 -1\"\n                    ></a-cursor>\n                </a-camera>\n                \n                <a-light type=\"ambient\" color=\"#404040\"></a-light>\n            </a-scene>\n        </div>\n    );\n}",
    "active": true
  },
  "components/SceneSelector.tsx": {
    "code": "'use client';\n\ninterface Scene {\n    id: number;\n    name: string;\n    image: string;\n    thumbnail: string;\n}\n\ninterface SceneSelectorProps {\n    scenes: Scene[];\n    currentScene: Scene;\n    onSceneChange: (scene: Scene) => void;\n}\n\nexport function SceneSelector({ scenes, currentScene, onSceneChange }: SceneSelectorProps) {\n    return (\n        <div className=\"container mx-auto px-4 py-4\">\n            <div className=\"flex space-x-4 overflow-x-auto pb-2\">\n                {scenes.map((scene) => (\n                    <button\n                        key={scene.id}\n                        onClick={() => onSceneChange(scene)}\n                        className={`flex-shrink-0 group relative rounded-lg overflow-hidden transition-all duration-300 hover:scale-105 ${\n                            currentScene.id === scene.id\n                                ? 'ring-2 ring-blue-500 scale-105'\n                                : 'hover:ring-2 hover:ring-white/50'\n                        }`}\n                    >\n                        <img\n                            src={scene.thumbnail}\n                            alt={scene.name}\n                            className=\"w-32 h-20 object-cover\"\n                        />\n                        <div className=\"absolute inset-0 bg-black/40 flex items-end\">\n                            <div className=\"p-2 w-full\">\n                                <p className=\"text-white text-sm font-medium truncate\">\n                                    {scene.name}\n                                </p>\n                            </div>\n                        </div>\n                        {currentScene.id === scene.id && (\n                            <div className=\"absolute top-1 right-1 w-2 h-2 bg-blue-500 rounded-full\"></div>\n                        )}\n                    </button>\n                ))}\n            </div>\n        </div>\n    );\n}",
    "active": true
  },
  "components/VRControls.tsx": {
    "code": "'use client';\n\nimport { useState, useEffect } from 'react';\n\ninterface VRControlsProps {\n    isVRMode: boolean;\n    onToggleVR: () => void;\n}\n\nexport function VRControls({ isVRMode, onToggleVR }: VRControlsProps) {\n    const [vrSupported, setVrSupported] = useState(false);\n    const [isFullscreen, setIsFullscreen] = useState(false);\n\n    useEffect(() => {\n        // Check VR support\n        if (typeof window !== 'undefined') {\n            setVrSupported('xr' in navigator || 'getVRDisplays' in navigator);\n        }\n    }, []);\n\n    const toggleFullscreen = () => {\n        if (!document.fullscreenElement) {\n            document.documentElement.requestFullscreen();\n            setIsFullscreen(true);\n        } else {\n            document.exitFullscreen();\n            setIsFullscreen(false);\n        }\n    };\n\n    return (\n        <div className=\"flex items-center space-x-4\">\n            <button\n                onClick={toggleFullscreen}\n                className=\"p-2 rounded-lg bg-white/20 hover:bg-white/30 text-white transition-colors\"\n                title=\"Toggle Fullscreen\"\n            >\n                <svg\n                    className=\"w-5 h-5\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                >\n                    {isFullscreen ? (\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M9 9V4.5M9 9H4.5M9 9L3.5 3.5M15 15v4.5M15 15h4.5M15 15l5.5 5.5M15 9h4.5M15 9V4.5M15 9l5.5-5.5M9 15H4.5M9 15v4.5M9 15l-5.5 5.5\"\n                        />\n                    ) : (\n                        <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4\"\n                        />\n                    )}\n                </svg>\n            </button>\n\n            {vrSupported && (\n                <button\n                    onClick={onToggleVR}\n                    className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n                        isVRMode\n                            ? 'bg-blue-600 hover:bg-blue-700 text-white'\n                            : 'bg-white/20 hover:bg-white/30 text-white'\n                    }`}\n                >\n                    {isVRMode ? 'Exit VR' : 'Enter VR'}\n                </button>\n            )}\n        </div>\n    );\n}",
    "active": true
  }
}